This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-11T04:19:57.570Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintignore
.eslintrc.json
.gitignore
assets/license_pl.txt
assets/license.txt
assets/twitch-icon.svg
babel.config.js
electron/bridge.ts
electron/lib/items.ts
electron/lib/settings.ts
electron/lib/stream.ts
electron/main.ts
i18next-parser.config.js
locale/en.json
locale/pl.json
package-lock copy.json
package.json
prettier.config.js
public/index.html
README.md
renovate.json
src/@types/bridge.d.ts
src/@types/image.d.ts
src/@types/main.d.ts
src/App.tsx
src/components/Main/index.tsx
src/components/Main/language.tsx
src/components/Main/styles.ts
src/i18n.ts
src/index.tsx
src/stream/index.html
src/stream/stream.tsx
src/stream/StreamApp.tsx
src/stream/styles.ts
src/styles/GlobalStyle.ts
src/utils/defaultSettings.ts
tsconfig.json
webpack/main.webpack.js
webpack/renderer.webpack.js
webpack/rules.webpack.js

================================================================
Repository Files
================================================================

================
File: .eslintignore
================
*/.js
node_modules
dist
webpack/*.js
.webpack
out

================
File: .eslintrc.json
================
{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "standard",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "prettier",
    "@typescript-eslint"
  ],
  "rules": {
    "react/prop-types": "off"
  }
}

================
File: .gitignore
================
node_modules
dist
packages
.webpack
out
.DS_Store
yarn-error.log


================
File: babel.config.js
================
module.exports = {
  presets: [
    '@babel/preset-env',
    '@babel/preset-typescript',
    ['@babel/preset-react', {
      runtime: 'automatic'
    }]
  ],
  plugins: [
    ['@babel/plugin-transform-runtime', {
      regenerator: true,
      helpers: false,
    }]
  ],
  "sourceType": "unambiguous",
}

================
File: electron/bridge.ts
================
import { contextBridge, ipcRenderer } from 'electron'
import { Settings } from '../src/@types/main.d'

export const api = {
  readFilesUponStart: () => {
    ipcRenderer.send('readFilesUponStart')
  },
  openFolder: () => {
    ipcRenderer.send('openFolderRequest')
  },
  openUrl: (url: string) => {
    ipcRenderer.send('openUrl', url)
  },
  copyToClipboard: (text: string) => {
    ipcRenderer.send('copyToClipboard', text);
  },
  getSettings: (): Settings => {
    return ipcRenderer.sendSync('getSettings');
  },
  getSetting: <K extends keyof Settings>(key: K): Settings[K] => {
    return ipcRenderer.sendSync('getSetting', key);
  },
  saveSetting: <K extends keyof Settings>(key: K, value: Settings[K]) => {
    ipcRenderer.send('saveSetting', key, value);
  },
  loadManualItems: () => {
    ipcRenderer.send('loadManualItems');
  },
  saveManualItem: (itemName: string, isFound: boolean) => {
    ipcRenderer.send('saveManualItem', itemName, isFound);
  },
  getAllDropRates: () => {
    ipcRenderer.send('getAllDropRates');
  },
  getStreamPort: (): number => {
    return ipcRenderer.sendSync('getStreamPort');
  },
  on: (channel: string, callback: Function) => {
    ipcRenderer.removeAllListeners(channel);
    ipcRenderer.on(channel, (_, data) => callback(data))
  },
}

contextBridge.exposeInMainWorld('Main', api)

================
File: electron/lib/items.ts
================
import { dialog } from 'electron';
import * as d2s from '@dschu012/d2s';
import { constants } from '@dschu012/d2s/lib/data/versions/96_constant_data';
import { existsSync, promises } from 'fs';
import { basename, extname, join, resolve, sep } from 'path';
import { IpcMainEvent } from 'electron/renderer';
import { readdirSync, statSync } from 'original-fs';
import { FileReaderResponse } from '../../src/@types/main.d';
import chokidar, { FSWatcher } from 'chokidar';
import { eventToReply, setEventToReply } from '../main';
import settingsStore from './settings';
import { updateDataToListeners } from './stream';
const { readFile } = promises;

class ItemsStore {
  currentData: FileReaderResponse | null;
  fileWatcher: FSWatcher | null;
  watchPath: string | null;
  filesChanged: boolean;
  readingFiles: boolean;

  constructor() {
    this.currentData = {
      items: [],
      stats: {
        level: 0,
        name: "",
        gold: 0,
        strength: 0,
        energy: 0,
        dexterity: 0,
        vitality: 0,
        unused_skill_points: 0,
        max_hp: 0,
        fasterRunWalk: 0,
        fasterHitRate: 0,
        fasterCastRate: 0,
        fire: 0,
        cold: 0,
        lightning: 0,
        poison: 0,
      }
    };
    this.fileWatcher = null;
    this.watchPath = null;
    this.filesChanged = false;
    this.readingFiles = false;
    setInterval(this.tickReader, 500);
  }

  getItems = () => {
    return this.currentData;
  }

  openAndParseSaves = (event: IpcMainEvent) => {
    return dialog.showOpenDialog({
      title: "Select Diablo 2 / Diablo 2 Resurrected save folder",
      message: "Select Diablo 2 / Diablo 2 Resurrected save folder",
      properties: ['openDirectory'],
    }).then((result) => {
      if (result.filePaths[0]) {
        const path = result.filePaths[0];
        event.reply('openFolderWorking', null);
        this.parseSaves(event, path, true);
      } else {
        this.currentData = null;
        event.reply('noDirectorySelected', null);
        updateDataToListeners();
      }
    }).catch((e) => {
      event.reply('noDirectorySelected', null);
      console.log(e);
    });
  };

  prepareChokidarGlobe = (filename: string): string => {
    if (filename.length < 2) {
      return filename;
    }
    const resolved = resolve(filename);
    return resolved.substring(0, 1) + resolved.substring(1).split(sep).join('/') + '/*.d2s';
  }

  parseSaves = async (event: IpcMainEvent, path: string, userRequested: boolean) => {
    const files = readdirSync(path).filter(file => ['.d2s'].indexOf(extname(file).toLowerCase()) !== -1);

    if (!eventToReply) {
      setEventToReply(event);
    }

    if (files.length) {
      // if no file watcher is active
      if (!this.fileWatcher) {
        this.watchPath = path;
        this.fileWatcher = chokidar.watch(this.prepareChokidarGlobe(this.watchPath), {
          followSymlinks: false,
          ignoreInitial: true,
          depth: 0,
        }).on('all', () => {
          this.filesChanged = true;
        });
      }
      // if file watcher is enabled, and directory changed
      if (this.fileWatcher && this.watchPath && this.watchPath !== path) {
        this.fileWatcher.unwatch(this.prepareChokidarGlobe(this.watchPath)).add(this.prepareChokidarGlobe(path));
        this.watchPath = path;
      }
    }

    const getNewestFile = (files: string[]): string | null => {
        const out: Array<{ file: string, mtime: number }> = [];
        files.forEach((file: string) => {
            const stats = statSync(join(path, file));
            if(stats.isFile()) {
                out.push({"file": file, "mtime": stats.mtime.getTime()});
            }
        });
        out.sort(function(a,b) {
            return b.mtime - a.mtime;
        })
        return (out.length > 0) ? out[0].file : null;
    }

    const newest = getNewestFile(files);

    if (newest) {
      const saveName = basename(newest).replace(".d2s", "");
      let result: FileReaderResponse | null = null;
      await readFile(join(path, newest))
        .then((buffer) => this.parseSave(saveName, buffer, extname(newest).toLowerCase()))
        .then((data) => {
          result = data;
        })
        .catch((e) => {
          console.log("ERROR", e);
          event.reply('error', (e as Error).message);
          return null;
        })
      if (result) {
        if (userRequested && path && path !== '') {
          settingsStore.saveSetting('saveDir', path);
        }
        event.reply('openFolder', result);
        this.currentData = result;
        updateDataToListeners();
      }
    }

  }

  parseSave = async (saveName: string, content: Buffer, extension: string): Promise<FileReaderResponse> => {
    const items: d2s.types.IItem[] = [];
    const stats = {
      name: '',
      gold: 0,
      level: 0,
      strength: 0,
      energy: 0,
      dexterity: 0,
      vitality: 0,
      unused_skill_points: 0,
      max_hp: 0,
      fasterRunWalk: 0,
      fasterHitRate: 0,
      fasterCastRate: 0,
      fire: 0,
      cold: 0,
      lightning: 0,
      poison: 0,
    };
    
    const parseItems = (itemList: d2s.types.IItem[]) => {
      itemList.forEach((item) => {
        items.push(item);
        if (item.socketed_items && item.socketed_items.length) {
          parseItems(item.socketed_items);
        }
      });
    }

    const parseD2S = (response: d2s.types.ID2S) => {
      const items = response.items || [];
      const mercItems = response.merc_items || [];
      const corpseItems = response.corpse_items || [];
      const itemList = [
        ...items,
        ...mercItems,
        ...corpseItems,
      ]
      parseItems(itemList);
      stats.name = response.header.name;
      stats.gold = (response.attributes.gold || 0) + (response.attributes.stashed_gold || 0);
      stats.level = response.header.level;
      stats.strength = response.attributes.strength;
      stats.energy = response.attributes.energy;
      stats.dexterity = response.attributes.dexterity;
      stats.vitality = response.attributes.vitality;
      stats.unused_skill_points = response.attributes.unused_skill_points;
      stats.max_hp = response.attributes.max_hp;

      response.item_bonuses.forEach(bonus => {
        if (bonus.name === 'item_fastercastrate') {
          stats.fasterCastRate = bonus.values.reduce((acc, val) => acc + val);
        }
        if (bonus.name === 'item_fastergethitrate') {
          stats.fasterHitRate = bonus.values.reduce((acc, val) => acc + val);
        }
        if (bonus.name === 'item_fastermovevelocity') {
          stats.fasterRunWalk = bonus.values.reduce((acc, val) => acc + val);
        }
        if (bonus.name === 'fireresist') {
          stats.fire = bonus.values.reduce((acc, val) => acc + val);
        }
        if (bonus.name === 'coldresist') {
          stats.cold = bonus.values.reduce((acc, val) => acc + val);
        }
        if (bonus.name === 'lightresist') {
          stats.lightning = bonus.values.reduce((acc, val) => acc + val);
        }
        if (bonus.name === 'poisonresist') {
          stats.poison = bonus.values.reduce((acc, val) => acc + val);
        }
      });
    };

    await d2s.read(content, constants).then(parseD2S);
    return {
      items,
      stats,
    };
  };

  readFilesUponStart = async (event: IpcMainEvent) => {
    const saveDir = settingsStore.getSetting('saveDir');
    if (saveDir && existsSync(saveDir)) {
      this.parseSaves(event, saveDir, false);
    } else {
      event.reply('noDirectorySelected', null);
    }
  }

  tickReader = async () => {
    if (eventToReply && this.watchPath && this.filesChanged && !this.readingFiles) {
      console.log('re-reading files!');
      this.readingFiles = true;
      this.filesChanged = false;
      await this.parseSaves(eventToReply, this.watchPath, false);
      this.readingFiles = false;
    }
  }

  shutdown = async () => {
    if (this.fileWatcher) {
      await this.fileWatcher.close();
    }
  }
}

const itemsStore = new ItemsStore();
export default itemsStore;

================
File: electron/lib/settings.ts
================
import { app } from 'electron';
import { Settings } from '../../src/@types/main.d';
import storage from 'electron-json-storage';
import { eventToReply } from '../main';
import { updateSettingsToListeners } from './stream';
import defaultSettings from '../../src/utils/defaultSettings';

class SettingsStore {
  currentSettings: Settings = defaultSettings;

  constructor() {
    storage.setDataPath(app.getPath('userData'));
    this.currentSettings = this.loadSettings();
  }

  getSettings = (): Settings => {
    return this.currentSettings;
  }

  loadSettings = (): Settings => {
    const settings = (storage.getSync('settings') as Settings);
    return {
      ...defaultSettings,
      ...settings
    };
  }
  
  getSetting = <K extends keyof Settings>(key: K): Settings[K] | null => {
    return this.currentSettings[key] ? this.currentSettings[key] : null;
  }
  
  saveSetting = <K extends keyof Settings>(key: K, value: Settings[K]) => {
    this.currentSettings[key] = value;
    storage.set('settings', this.currentSettings, (error) => {
      if (error) console.log(error);
      if (eventToReply) {
        eventToReply.reply('updatedSettings', this.currentSettings);
      }
      updateSettingsToListeners();
    });
  }
}

const settingsStore = new SettingsStore();
export default settingsStore;

================
File: electron/lib/stream.ts
================
import { join, resolve } from 'path';
import express from "express";
import http from "http";
import request from "request";
import { Server, Socket } from "socket.io";
import { CSP_HEADER } from '../main';
import settingsStore from './settings';
import itemsDatabase from './items';
import getPort, {portNumbers} from 'get-port';

// these constants are set by the build stage
declare const STREAM_WEBPACK_ENTRY: string;

const streamListeners: Map<string, Socket> = new Map();
export let streamPort = 3888;

export async function setupStreamFeed() {
  const streamApp = express();
  const server = http.createServer(streamApp);
    const io = new Server(server, {
    serveClient: false,
  });

  streamApp.get("/", (req, res) => {
    if (STREAM_WEBPACK_ENTRY.startsWith("http")) {
      request(STREAM_WEBPACK_ENTRY)
        .on("response", remoteRes => {
            remoteRes.headers["content-security-policy"] = CSP_HEADER;
        })
        .pipe(res);
    } else {
      res.setHeader('content-security-policy', CSP_HEADER);
      res.sendFile(STREAM_WEBPACK_ENTRY.replace('file://', ''));
    }
  });

  streamApp.get("/stream/*", (req, res) => {
    const filename = req.url.split('/').pop()?.replace('..', '') || 'none';
    res.sendFile(resolve(join(__dirname, "..", "renderer", "stream", filename)));
  });

  io.on("connection", (socket: Socket) => {
    console.log('stream client connected')
    addStreamListener(socket);
    socket.on("disconnect", () => {
      console.log('stream client disconnected')
      removeStreamListener(socket);
    });
  });

  streamPort = await getPort({port: portNumbers(3666, 3766)});
  server.listen(streamPort);
}

const addStreamListener = (socket: Socket): void => {
  streamListeners.set(socket.id, socket);
  socket.emit("updatedSettings", settingsStore.getSettings());
  updateDataToListeners();
  updateSettingsToListeners();
}

const removeStreamListener = (socket: Socket): void => {
  streamListeners.delete(socket.id);
}

export function updateSettingsToListeners() {
  const settings = settingsStore.getSettings();
  streamListeners.forEach((socket) => {
    socket.emit("updatedSettings", settings);
  });
}

export function updateDataToListeners() {
  const items = itemsDatabase.getItems();
  streamListeners.forEach((socket) => {
    socket.emit("openFolder", items);
  });
}

================
File: electron/main.ts
================
import { app, BrowserWindow, ipcMain, dialog, shell, session, clipboard } from 'electron';
import { join } from 'path';
import { IpcMainEvent } from 'electron/renderer';
import WindowStateKeeper from "electron-window-state";
import itemsDatabase from './lib/items';
import settingsStore from './lib/settings';
import { setupStreamFeed, streamPort } from './lib/stream';

// these constants are set by the build stage
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

export const CSP_HEADER =
  "default-src 'self' 'unsafe-inline' data: ws:; " +
  "script-src 'self' 'unsafe-eval' 'unsafe-inline' data:; " +
  "style-src 'unsafe-inline'; " +
  "style-src-elem 'unsafe-inline' http://localhost:* https://fonts.googleapis.com; " +
  "font-src file: http://localhost:* https://fonts.gstatic.com; " +
  "connect-src ws: file: http://localhost:*; " +
  "frame-src file: http://localhost:*";

export let eventToReply: IpcMainEvent | null;
export function setEventToReply(e: IpcMainEvent) {
  eventToReply = e;
}

let mainWindow: BrowserWindow | null;
export let mainWindowReady = false;

const assetsPath =
  process.env.NODE_ENV === 'production'
    ? process.resourcesPath
    : app.getAppPath()

function createWindow() {
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    // eslint-disable-next-line node/no-callback-literal
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [CSP_HEADER]
      }
    })
  })

  const mainWindowState = WindowStateKeeper({
    defaultWidth: 1100,
    defaultHeight: 700,
  });

  mainWindow = new BrowserWindow({
    icon: join(assetsPath, 'assets', 'icon.png'),
    x: mainWindowState.x,
    y: mainWindowState.y,
    width: mainWindowState.width,
    height: mainWindowState.height,
    minWidth: 540,
    minHeight: 300,
    backgroundColor: '#111111',
    autoHideMenuBar: true,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    }
  })
  mainWindowState.manage(mainWindow);

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
  if (process.env.ELECTRON_ENV === 'development') {
    mainWindow.webContents.openDevTools()
  }

  mainWindow.on('closed', () => {
    closeApp();
  })

  setupStreamFeed();
}

async function closeApp() {
  itemsDatabase.shutdown();
  app.quit();
}

async function registerListeners() {
  ipcMain.on('readFilesUponStart', (event) => {
    itemsDatabase.readFilesUponStart(event);
  });
  ipcMain.on('openFolderRequest', (event) => {
    itemsDatabase.openAndParseSaves(event);
  });
  ipcMain.on('openUrl', (_, url) => {
    shell.openExternal(url);
  });
  ipcMain.on('getSetting', (event, key) => {
    event.returnValue = settingsStore.getSetting(key);
  });
  ipcMain.on('getSettings', (event) => {
    eventToReply = event;
    event.returnValue = settingsStore.getSettings();
  });
  ipcMain.on('saveSetting', (event, key, value) => {
    settingsStore.saveSetting(key, value);
  });
  ipcMain.on('copyToClipboard', (event, text) => {
    clipboard.writeText(text);
  });
  ipcMain.on('getStreamPort', (event) => {
    eventToReply = event;
    event.returnValue = streamPort;
  });
  mainWindowReady = true;
}

app.on('ready', createWindow)
  .whenReady()
  .then(registerListeners)
  .catch(e => console.error(e))

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    closeApp();
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

================
File: i18next-parser.config.js
================
module.exports = {
  contextSeparator: '_',
  defaultNamespace: 'translation',
  defaultValue: '',
  indentation: 2,
  keepRemoved: false,
  keySeparator: false,
  lexers: {
    ts: ['JavascriptLexer'],
    tsx: ['JsxLexer'],
    default: ['JavascriptLexer']
  },
  lineEnding: 'auto',
  locales: ['en', 'pl'],
  namespaceSeparator: false,
  output: 'locale/$LOCALE.json',
  pluralSeparator: '_',
  input: ['src/**'],
  sort: false,
  skipDefaultValues: false,
  useKeysAsDefaultValue: true,
  verbose: false,
  failOnWarnings: false,
  failOnUpdate: false,
  customValueTemplate: null,
  resetDefaultValueLocale: null,
  i18nextOptions: null
}

================
File: locale/en.json
================
{
  "Speedrun tool": "Speedrun tool",
  "Wybierz folder z sejvami": "Select folder to read saves from",
  "Oczekiwanie na wybranie folderu...": "Waiting for folder...",
  "Odczytywanie plików...": "Reading files...",
  "Zmień folder": "Change folder",
  "Ładowanie...": "Loading...",
  "Śledzony folder:": "Watched folder:",
  "OBS link": "OBS link",
  "Skopiowano link do schowka.": "Copied link to clipboard.",
  "Statistics are updated each time the game saves the game, which is:": "Statistics are updated each time the game saves the game, which is:",
  "(about) each 5 minutes": "(about) each 5 minutes",
  "each time an item is identified": "each time an item is identified",
  "when you quit&save the game": "when you quit&save the game",
  "Note: statistics from charms are counted in, regardless of their level requirement, to simplify the algorithm": "Note: statistics from charms are counted in, regardless of their level requirement, to simplify the algorithm",
  "English": "English",
  "Polski": "Polski",
  "Odczytane ": "Read ",
  "temu": "ago"
}

================
File: locale/pl.json
================
{
  "Speedrun tool": "Speedrun tool",
  "Wybierz folder z sejvami": "Wybierz folder z sejvami",
  "Oczekiwanie na wybranie folderu...": "Oczekiwanie na wybranie folderu...",
  "Odczytywanie plików...": "Odczytywanie plików...",
  "Zmień folder": "Zmień folder",
  "Ładowanie...": "Ładowanie...",
  "Śledzony folder:": "Śledzony folder:",
  "OBS link": "Link do OBS",
  "Skopiowano link do schowka.": "Skopiowano link do schowka.",
  "Statistics are updated each time the game saves the game, which is:": "Statystyki uaktualniają się za każdym razem gry gra zapiszę sejva, czyli:",
  "(about) each 5 minutes": "(około) co 5 minut",
  "each time an item is identified": "za każdym razem gry identyfikujesz przedmiot",
  "when you quit&save the game": "w momencie zapisania i wyjścia z gry",
  "Note: statistics from charms are counted in, regardless of their level requirement, to simplify the algorithm": "Uwaga: statystyki z talizmanów naliczaną się niezależnie od wymaganego poziomu postaci, dla uproszczenia algorytmu",
  "English": "English",
  "Polski": "Polski",
  "Odczytane ": "Odczytane ",
  "temu": "temu"
}


================
File: package.json
================
{
  "name": "d2rspeedrun",
  "author": "Kamil Tunkiewicz <kamil.tunkiewicz(at)gmail.com>",
  "version": "3.0.1",
  "description": "Scan your Diablo 2 Resurrected saves and displays stats about the last updated one",
  "main": "./.webpack/main",
  "scripts": {
    "start": "electron-forge start",
    "package": "electron-forge package",
    "build-mac": "electron-builder build -m",
    "build-win": "electron-builder build -w",
    "make": "electron-forge make",
    "release": "electron-forge publish",
    "lint": "eslint . --ext js,ts"
  },
  "keywords": [],
  "license": "ISC",
  "dependencies": {
    "@dschu012/d2s": "https://github.com/zeddicus-pl/d2s.git",
    "@emotion/react": "^11.10.4",
    "@emotion/styled": "^11.10.4",
    "@mui/icons-material": "^5.10.3",
    "@mui/material": "^5.10.4",
    "@mui/styled-engine-sc": "^5.10.3",
    "@types/electron-json-storage": "^4.5.0",
    "@types/express": "^4.17.13",
    "@types/get-port": "^4.2.0",
    "@types/node-fetch": "^2",
    "@types/pretty-ms": "^5.0.1",
    "@types/request": "^2.48.8",
    "animate.css": "^4.1.1",
    "chokidar": "^3.5.3",
    "circle-flags": "github:HatScripts/circle-flags",
    "copy-webpack-plugin": "^11.0.0",
    "css-loader": "^6.7.1",
    "electron-json-storage": "^4.5.0",
    "electron-window-state": "^5.0.3",
    "express": "^4.18.1",
    "get-port": "^6.1.2",
    "i18next": "^21.9.1",
    "material-react-toastify": "^1.0.1",
    "node-fetch": "3",
    "node-loader": "^2.0.0",
    "pretty-ms": "^8.0.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-i18next": "^11.18.6",
    "react-use-precision-timer": "^1.0.8",
    "request": "^2.88.2",
    "socket.io": "^4.5.2",
    "socket.io-client": "^4.5.2",
    "style-loader": "^3.3.1",
    "styled-components": "^5.3.5",
    "svg-inline-loader": "^0.8.2",
    "svg-url-loader": "^8.0.0"
  },
  "devDependencies": {
    "@babel/core": "7.19.0",
    "@babel/plugin-transform-runtime": "7.18.10",
    "@babel/preset-env": "7.19.0",
    "@babel/preset-react": "7.18.6",
    "@babel/preset-typescript": "7.18.6",
    "@electron-forge/cli": "6.0.0-beta.66",
    "@electron-forge/maker-deb": "6.0.0-beta.66",
    "@electron-forge/maker-rpm": "6.0.0-beta.66",
    "@electron-forge/maker-squirrel": "6.0.0-beta.66",
    "@electron-forge/maker-zip": "6.0.0-beta.66",
    "@electron-forge/plugin-webpack": "6.0.0-beta.66",
    "@marshallofsound/webpack-asset-relocator-loader": "0.5.0",
    "@testing-library/jest-dom": "5.16.5",
    "@testing-library/react": "13.4.0",
    "@types/electron-devtools-installer": "2.2.2",
    "@types/jest": "29.0.1",
    "@types/react": "18.0.19",
    "@types/react-dom": "18.0.6",
    "@types/styled-components": "5.1.26",
    "@typescript-eslint/eslint-plugin": "5.36.2",
    "@typescript-eslint/parser": "5.36.2",
    "babel-loader": "8.2.5",
    "cross-env": "7.0.3",
    "electron": "20.1.3",
    "electron-builder": "^23.3.3",
    "eslint": "8.23.0",
    "eslint-config-prettier": "8.5.0",
    "eslint-config-standard": "17.0.0",
    "eslint-plugin-import": "2.26.0",
    "eslint-plugin-node": "11.1.0",
    "eslint-plugin-prettier": "4.2.1",
    "eslint-plugin-promise": "6.0.1",
    "eslint-plugin-react": "7.31.8",
    "file-loader": "^6.2.0",
    "jest": "29.0.3",
    "npm-run-all": "4.1.5",
    "prettier": "2.7.1",
    "ts-jest": "29.0.0",
    "typescript": "^4.8.3",
    "wait-on": "6.0.1",
    "webpack-cli": "^4.10.0"
  },
  "build": {
    "appId": "d2rSpeedRun",
    "productName": "d2rSpeedRun",
    "win": {
      "target": [
        "nsis"
      ],
      "icon": "./assets/icon.ico",
      "requestedExecutionLevel": "requireAdministrator"
    },
    "mac": {
      "identity": null
    },
    "nsis": {
      "installerIcon": "./assets/install.ico",
      "uninstallerIcon": "./assets/delete.ico",
      "uninstallDisplayName": "d2rSpeedRun",
      "license": "./assets/license.txt",
      "oneClick": false,
      "allowToChangeInstallationDirectory": true
    },
    "files": [
      ".webpack/**/*"
    ],
    "directories": {
      "buildResources": "assets"
    }
  },
  "config": {
    "forge": {
      "packagerConfig": {
        "name": "SpeedRun Tool",
        "executableName": "d2rSpeedRun",
        "icon": "assets/icon",
        "extraResource": [
          "assets"
        ]
      },
      "makers": [
        {
          "name": "@electron-forge/maker-zip",
          "platforms": [
            "darwin"
          ]
        }
      ],
      "plugins": [
        [
          "@electron-forge/plugin-webpack",
          {
            "mainConfig": "./webpack/main.webpack.js",
            "renderer": {
              "config": "./webpack/renderer.webpack.js",
              "entryPoints": [
                {
                  "html": "./public/index.html",
                  "js": "./src/index.tsx",
                  "name": "main_window",
                  "preload": {
                    "js": "./electron/bridge.ts"
                  }
                },
                {
                  "html": "./src/stream/index.html",
                  "js": "./src/stream/stream.tsx",
                  "name": "stream"
                }
              ]
            }
          }
        ]
      ]
    }
  }
}

================
File: prettier.config.js
================
module.exports = {
  semi: true,
  singleQuote: true,
  arrowParens: 'avoid',
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Diablo 2 Speedrun Tool</title>
  <style>
    /* latin-ext */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 300;
      font-display: swap;
      src: url('stream/Roboto-latinext300.woff2') format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }
    /* latin */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 300;
      font-display: swap;
      src: url('stream/Roboto-latin300.woff2') format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
    /* latin-ext */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 400;
      font-display: swap;
      src: url('stream/Roboto-latinext400.woff2') format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }
    /* latin */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 400;
      font-display: swap;
      src: url('stream/Roboto-latin400.woff2') format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
    /* latin-ext */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url('stream/Roboto-latinext500.woff2') format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }
    /* latin */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url('stream/Roboto-latin500.woff2') format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
    /* latin-ext */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 700;
      font-display: swap;
      src: url('stream/Roboto-latinext700.woff2') format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }
    /* latin */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 700;
      font-display: swap;
      src: url('stream/Roboto-latin700.woff2') format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
  </style>
</head>
<body>
  <div id="root"></div>
</body>
</html>

================
File: README.md
================
# SpeedRun Tool for Diablo 2 Resurrected

https://zeddicus-pl.github.io/d2rSpeedRun/

Custom CSS template for OBS browser:
```
@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans&display=swap');

/* all text except the "last read" line */
#stats * {
    font-family: "Josefin Sans";
    font-size: 30px;
}

/* labels */
#stats div div div div:first-child {
    width: 100px;
    color: blue;
    /* if you add "!important" in the end it overrides
    /* the colors on the first column, example: */
    /* color: blue; !important; */
}

/* values */
#stats div div div div:nth-child(2) {
    color: red;
}


/* "last read" line */
#stats > div:last-child {
    font-size: 25px !important;
}
```

(the CSP rules are configured to allow importing fonts only from google fonts)

================
File: renovate.json
================
{
  "extends": ["config:base"],
  "semanticCommits": true,
  "stabilityDays": 3,
  "prCreation": "not-pending",
  "labels": ["dependencies"]
}

================
File: src/@types/bridge.d.ts
================
import { api } from '../../electron/bridge'

declare global {
  // eslint-disable-next-line
  interface Window {
    Main: typeof api
  }
}

================
File: src/@types/image.d.ts
================
declare module '*.png';
declare module '*.jpeg';
declare module '*.jpg';
declare module '*.gif';
declare module '*.svg';

================
File: src/@types/main.d.ts
================
import * as d2s from '@dschu012/d2s';

export type FileReaderResponse = {
  items: d2s.types.IItem[],
  stats: {
    name: string,
    gold: number,
    level: number,
    strength: number,
    energy: number,
    dexterity: number,
    vitality: number,
    unused_skill_points: number,
    max_hp: number,
    fasterRunWalk: number,
    fasterHitRate: number,
    fasterCastRate: number,
    fire: number,
    cold: number,
    lightning: number,
    poison: number,
    categories: string[];
    type: string;
    type_name: string;
  },
}

export type Settings = {
  saveDir: string,
  lang: string,
  font: string,
  columnGap: number,
  selectedGemFilters: string[],
}

================
File: src/App.tsx
================
import { Main } from './components/Main'

import { useState, useEffect, MouseEventHandler } from 'react';
import { ThemeProvider } from '@mui/system';
import { createTheme } from '@mui/material';
import { toast, ToastContainer } from 'material-react-toastify';
import 'material-react-toastify/dist/ReactToastify.css';
import { FileReaderResponse, Settings } from './@types/main.d';
import defaultSettings from './utils/defaultSettings';
import i18n from './i18n';

/* eslint-disable no-unused-vars */
export enum UiState {
  Loading = -1,
  Ready = 0,
  FileDialog = 1,
  Reading = 2,
  List = 3,
}
/* eslint-enable no-unused-vars */

export function App() {
  const [uiState, setUiState] = useState(UiState.Loading);
  const [appSettings, setAppSettings] = useState<Settings>(defaultSettings);
  const [localPort, setLocalPort] = useState(0);
  const [receivedSettings, setReceivedSettings] = useState(false);

  const updateSettings = (settings: Settings) => {
    // @ts-ignore
    if (!settings.saveDir) {
      settings.saveDir = '';
    }
    if (!settings.lang) {
      settings.lang = 'en';
    }
    i18n.changeLanguage(settings.lang);
    setAppSettings(settings);
    if (!receivedSettings) {
      setReceivedSettings(true);
    }
  }

  const readData = (settings: Settings) => {
    if (settings.saveDir && settings.saveDir !== '') {
      window.Main.readFilesUponStart();
    } else {
      setUiState(UiState.Ready);
    }
  }

  const handleFileClick = async () => {
    if (uiState === UiState.Ready || uiState === UiState.List) {
      setUiState(UiState.FileDialog);
      window.Main.openFolder();
    }
  }

  useEffect(() => {
    window.Main.on('updatedSettings', (settings: Settings) => {
      updateSettings(settings);
      readData(settings);
    });
    window.Main.on('noDirectorySelected', () => {
      setUiState(UiState.Ready);
    });
    window.Main.on('openFolderWorking', () => {
      setUiState(UiState.Reading);
    });
    window.Main.on('openFolder', (fileReaderResponse: FileReaderResponse) => {
      if (fileReaderResponse === null) {
        if (uiState !== UiState.Loading) {
          setUiState(UiState.Ready);
        }
        return;
      }
      if (uiState !== UiState.Reading) {
        setUiState(UiState.List);
        return;
      }
      setTimeout(() => {
        setUiState(UiState.List);
      }, 500);
    });

    window.Main.on('error', (errorMsg: string) => {
      toast.error(errorMsg);
    });

    const settings = window.Main.getSettings();
    updateSettings(settings);
    readData(settings);

    const auxclickHandler: MouseEventHandler<HTMLAnchorElement> = (event) => {
      event.preventDefault();
    }

    setLocalPort(window.Main.getStreamPort());

    // @ts-ignore
    document.addEventListener('auxclick', auxclickHandler, false);
  }, [])

  if (!receivedSettings) {
    return null;
  }

  return (
    <>
      <ThemeProvider theme={createTheme({palette: { mode: 'dark' }})}>
        <>
          <Main
            uiState={uiState}
            onFileClick={handleFileClick}
            localPort={localPort}
            settings={appSettings}
          />
          <ToastContainer
            position="top-center"
            autoClose={2000}
            hideProgressBar
            newestOnTop={false}
            closeOnClick
            rtl={false}
            pauseOnFocusLoss
            draggable={false}
            pauseOnHover
          />
        </>
      </ThemeProvider>
    </>
  )
}

================
File: src/components/Main/index.tsx
================
import { Container, FolderButton } from './styles'
import { Typography, Button, FormControlLabel, Switch, TextField, Select, MenuItem, Checkbox, ListItemText, SelectChangeEvent } from '@mui/material';
import { UiState } from '../../App';
import { MouseEventHandler, useState } from 'react';
import { Settings } from '../../@types/main';
import { toast } from 'material-react-toastify';
import { Language } from './language';
import { useTranslation } from 'react-i18next';
import ContentCopyIcon from '@mui/icons-material/ContentCopy';

const gemTypes = ['topaz', 'amethyst', 'sapphire', 'ruby', 'emerald', 'diamond', 'skull'];
const gemQualities = ['chipped', 'flawed', 'normal', 'flawless', 'perfect'];
const gemFilters = [...gemTypes, ...gemQualities];

const capitalizeFirstLetter = (string: string) => {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

type MainProps = {
  uiState: UiState,
  settings: Settings,
  localPort: number,
  onFileClick: MouseEventHandler<HTMLButtonElement>,
}


export function Main({ uiState, settings, localPort, onFileClick }: MainProps) {
  const { t } = useTranslation();
  const [font, setFont] = useState(settings.font);
  const [columnGap, setColumnGap] = useState(settings.columnGap);
  const [selectedGemFilters, setSelectedGemFilters] = useState<string[]>(settings.selectedGemFilters);

  const handleGemFilterChange = (event: SelectChangeEvent<string[]>) => {
    const value = event.target.value as string[];
    setSelectedGemFilters(value);
    window.Main.saveSetting('selectedGemFilters', value);
  };

  const handleFontChange = (event: SelectChangeEvent<string>) => {
    const newFont = event.target.value;
    setFont(newFont);
    window.Main.saveSetting('font', newFont);
  };

  const handleColumnGapChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newGap = parseInt(event.target.value);
    setColumnGap(newGap);
    window.Main.saveSetting('columnGap', newGap);
  };
  

  return (
    <Container className="animate__animated animate__fadeIn">
      <div style={{ position: 'absolute', right: 10, top: 0 }}>
        <Language />
      </div>
      <h1>{t('Speedrun tool')}</h1>
      <FolderButton>
        { uiState !== UiState.Loading
          ? <>
            <Button
              variant="contained"
              onClick={onFileClick}
              disableFocusRipple={uiState !== UiState.Ready}
              disableRipple={uiState !== UiState.Ready}
            >
              { uiState === UiState.Ready && t('Wybierz folder z sejvami') }
              { uiState === UiState.FileDialog && t('Oczekiwanie na wybranie folderu...') }
              { uiState === UiState.Reading && t('Odczytywanie plików...') }
              { uiState === UiState.List && t('Zmień folder') }
            </Button>
          </>
          : <Typography variant="body2">
            {t('Ładowanie...')}
          </Typography>
        }
      </FolderButton>
      { uiState === UiState.List && <div style={{ paddingTop: 20 }}>
          <div style={{ marginBottom: 10 }}>
            {t('Śledzony folder:')}<br />
            <code>{ settings.saveDir }</code>
          </div>
          <div style={{ marginBottom: 10 }}>
            {t('OBS link')}: <a onClick={() => {
              window.Main.copyToClipboard('http://localhost:'+localPort);
              toast.success(t("Skopiowano link do schowka."), {
                position: "top-center",
                autoClose: 2000,
                hideProgressBar: true,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: false,
              });
            }}>http://localhost:{localPort} <ContentCopyIcon fontSize='small' /></a>
          </div>
          <div style={{ marginTop: 20 }}>
            <Typography variant="h6">Settings</Typography>
            <Select
              value={font}
              onChange={handleFontChange}
              label="Font"
              style={{ marginRight: 10 }}
            >
              <MenuItem value="Exocet">Exocet</MenuItem>
              <MenuItem value="Roboto">Roboto</MenuItem>
              <MenuItem value="Arial">Arial</MenuItem>
              <MenuItem value="Times New Roman">Times New Roman</MenuItem>
            </Select>
            <TextField
              type="number"
              label="Column Gap"
              value={columnGap}
              onChange={handleColumnGapChange}
              inputProps={{ min: 0, max: 80 }}
              style={{ marginTop: 10, width: 100 ,marginRight: 10 }}
            />
            <Select
              multiple
              value={selectedGemFilters}
              onChange={handleGemFilterChange}
              renderValue={(selected) => (selected as string[]).join(', ')}
              style={{ marginTop: 10, width: 200 }}
            >
              {gemFilters.map((filter) => (
                <MenuItem key={filter} value={filter}>
                  <Checkbox checked={selectedGemFilters.indexOf(filter) > -1} />
                  <ListItemText primary={filter.charAt(0).toUpperCase() + filter.slice(1)} />
                </MenuItem>
              ))}
            </Select>
          </div>
          <p>
            {t("Statistics are updated each time the game saves the game, which is:")}
            <ul>
              <li>{t("(about) each 5 minutes")}</li>
              <li>{t("each time an item is identified")}</li>
              <li>{t("when you quit&save the game")}</li>
            </ul>
            {t("Note: statistics from charms are counted in, regardless of their level requirement, to simplify the algorithm")}
          </p>
          <div>
            <iframe style={{ width: '80vw', margin: 'auto', height: 200, border: "1px solid #333" }} src="http://localhost:3666" />
          </div>
        </div>
      }
    </Container>
  )
};

================
File: src/components/Main/language.tsx
================
import { useState, MouseEvent } from 'react';
import IconButton from '@mui/material/IconButton';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import { useTranslation } from 'react-i18next';

import flagGB from 'circle-flags/flags/gb.svg';
import flagPL from 'circle-flags/flags/pl.svg';

export function Language() {
  const {t, i18n} = useTranslation();
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);

  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = (lang: string) => {
    i18n.changeLanguage(lang);
    window.Main.saveSetting('lang', lang);
    setAnchorEl(null);
  };

  let flag;
  switch (i18n.language) {
    case 'pl':
      flag = flagPL;
      break;
    default:
      flag = flagGB;
  }

  return <>
    <IconButton onClick={handleClick}>
      <img style={{ height: '1em' }} src={flag} />
    </IconButton>
    <Menu
      anchorEl={anchorEl}
      open={open}
      onClose={() => { setAnchorEl(null); }}
    >
      <MenuItem onClick={() => { handleClose('en') }}>
        <IconButton disableRipple disableFocusRipple >
          <img style={{ height: '1em' }} src={flagGB} />
        </IconButton>
        {t('English')}
      </MenuItem>
      <MenuItem onClick={() => { handleClose('pl') }}>
        <IconButton disableRipple disableFocusRipple>
          <img style={{ height: '1em' }} src={flagPL} />
        </IconButton>
        {t('Polski')}
      </MenuItem>
    </Menu>
  </>;
}

================
File: src/components/Main/styles.ts
================
import styled from 'styled-components'

export const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-family: sans-serif !important;
  color: #E1E1E6;
  font-size: 14px;

  h1 {
    padding: 0;
    margin-top: 4px;
    margin-bottom: 0;
  }

  button {
    margin-top: 14px;
  }

  ul {
    margin: 2px;
  }

  a {
    color: #6e6ec4;
    img {
      height: 12px;
      padding-left: 4px;
    }
  }

  h6 {
    width: 300px;
    text-align: right;
    font-size: 16px;
    margin-top: 5px;
  }
`

export const Image = styled.img`
  width: 300px;
`

export const Text = styled.p`
  margin-top: 24px;
  font-size: 18px;
`

export const FolderButton = styled.div`
  .MuiButtonBase {
    margin-top: 0 !important;
  }
`

================
File: src/i18n.ts
================
import i18n from "i18next";
import { initReactI18next } from "react-i18next";

import en from "../locale/en.json";
import pl from "../locale/pl.json";

i18n
  .use(initReactI18next)
  .init({
    resources: {
      en: { translation: en },
      pl: { translation: pl },
    },
    lng: "en",
    fallbackLng: "en",
    interpolation: {
      escapeValue: false,
    }
  });

export default i18n;

================
File: src/index.tsx
================
import { createRoot } from "react-dom/client";
import { App } from "./App";
import './i18n';

const container = document.getElementById('root');
const root = createRoot(container!);
root.render(<App />);

================
File: src/stream/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Diablo 2 Speedrun Tool</title>
  <script>
    const global = globalThis;
  </script>
  <style>
    /* latin-ext */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 300;
      font-display: swap;
      src: url('stream/Roboto-latinext300.woff2') format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }
    /* latin */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 300;
      font-display: swap;
      src: url('stream/Roboto-latin300.woff2') format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
    /* latin-ext */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 400;
      font-display: swap;
      src: url('stream/Roboto-latinext400.woff2') format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }
    /* latin */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 400;
      font-display: swap;
      src: url('stream/Roboto-latin400.woff2') format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
    /* latin-ext */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url('stream/Roboto-latinext500.woff2') format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }
    /* latin */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url('stream/Roboto-latin500.woff2') format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
    /* latin-ext */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 700;
      font-display: swap;
      src: url('stream/Roboto-latinext700.woff2') format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }
    /* latin */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 700;
      font-display: swap;
      src: url('stream/Roboto-latin700.woff2') format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
  </style>
</head>
<body id="streamRoot" onClick="javascript:document.body.style.backgroundColor='#111'">
  <div id="root"></div>
</body>
</html>

================
File: src/stream/stream.tsx
================
import { createRoot } from 'react-dom/client';
import StreamApp from "./StreamApp";
import '../i18n';

const container = document.getElementById('root');
const root = createRoot(container!);
root.render(<StreamApp />);

================
File: src/stream/StreamApp.tsx
================
import { useState, useEffect, ReactNode } from 'react';
import { useTimer } from "react-use-precision-timer";
import { io } from "socket.io-client";
import { FileReaderResponse, Settings } from '../@types/main.d';
import { Grid, createTheme } from '@mui/material';
import { ThemeProvider } from '@mui/system';
import { GlobalStyle } from '../styles/GlobalStyle';
import prettyMs from 'pretty-ms';
import { StatLabel, StatLine, StatValue } from './styles';
import { useTranslation } from 'react-i18next';
import defaultSettings from '../utils/defaultSettings';

const gemTypes = ['topaz', 'amethyst', 'sapphire', 'ruby', 'emerald', 'diamond', 'skull'];
const gemQualities = ['chipped', 'flawed', 'normal', 'flawless', 'perfect'];

export default function StreamApp() {
  const [data, setData] = useState<FileReaderResponse | null>(null);
  const [lastUpdate, setLastUpdate] = useState<number>(0);
  const [settings, setSettings] = useState<Settings>(defaultSettings);
  const timer = useTimer({
    delay: 1000,
    callback: () => { setLastUpdate(lastUpdate + 1);}
  });
  const { t, i18n } = useTranslation();

  const containerWidth = 100 - settings.columnGap;

  useEffect(() => {
    const socket = io();
    socket.on("updatedSettings", function (newSettings: Settings) {
      i18n.changeLanguage(newSettings.lang);
      setSettings(newSettings);
    });
    socket.on("openFolder", function (data: FileReaderResponse) {
      setData(data);
      setLastUpdate(0);
    });
    timer.start();
  }, []);

  if (data === null) {
    return null;
  }

  const formatGemName = (name: string): string => {
    const words = name.split(' ');
    if (words.length === 2) {
      const [quality, gemType] = words;
      return `${quality[0]}${quality[quality.length - 1]} ${gemType}`;
    }
    return name;
  };

  const getGemQuality = (name: string): string => {
    const words = name.split(' ');
    if (words.length === 2) {
      return words[0].toLowerCase();
    }
    return 'normal';
  };

  const itemCounts: {[itemId: string]: {count: number, name: string, category: string, quality?: string, gemType?: string}} = {};
  const qualityCounts: {[quality: string]: number} = {};

  data.items.forEach(item => {
    if (item.categories.includes("Rune") || item.categories.includes("Gem")) {
      const itemKey = item.type;
      const isGem = item.categories.includes("Gem");
      const gemType = isGem ? gemTypes.find(type => item.type_name.toLowerCase().includes(type)) : undefined;
      const gemQuality = isGem ? getGemQuality(item.type_name) : undefined;

      if (!itemCounts[itemKey]) {
        itemCounts[itemKey] = {
          count: 1,
          name: isGem ? formatGemName(item.type_name.replace(' Gem', '')) : item.type_name.replace(' Rune', ''),
          category: isGem ? "Gem" : "Rune",
          quality: gemQuality,
          gemType: gemType
        }
      } else {
        itemCounts[itemKey].count++;
      }

      if (isGem && gemQuality) {
        qualityCounts[gemQuality] = (qualityCounts[gemQuality] || 0) + 1;
      }
    }
  });

  const itemsArr: ReactNode[] = [];
  
  // Filter and sort items
  const filteredItems = Object.entries(itemCounts)
    .filter(([_, item]) => {
      if (item.category === "Rune") return true;
      if (item.gemType && settings.selectedGemFilters.includes(item.gemType)) return true;
      return false;
    })
    .sort(([_, a], [__, b]) => {
      if (a.category !== b.category) {
        return a.category === "Rune" ? -1 : 1;
      }
      return a.name.localeCompare(b.name);
    });

  // Display filtered items
  filteredItems.forEach(([itemKey, item], i) => {
    if (i > 0) {
      itemsArr.push(<span key={i + 'sep'}> </span>);
    }
    const itemColor = item.category === "Rune" ? "#FFA500" : "#00FFFF";
    itemsArr.push(
      <span key={itemKey} style={{color: itemColor}}>
        {item.count > 1 && <small>{item.count}<span style={{color: '#aaa'}}>x</span></small>}
        {item.name}
      </span>
    );
  });

  // Display quality counts
  gemQualities.forEach(quality => {
    if (settings.selectedGemFilters.includes(quality) && qualityCounts[quality]) {
      if (itemsArr.length > 0) {
        itemsArr.push(<span key={quality + 'sep'}> </span>);
      }
      itemsArr.push(
        <span key={quality} style={{color: "#00FFFF"}}>
          {qualityCounts[quality]}<span style={{color: '#aaa'}}>x</span>{quality.charAt(0).toUpperCase() + quality.slice(1)}
        </span>
      );
    }
  });

  const gold = new Intl.NumberFormat('en-GB', { maximumFractionDigits: 0 }).format(data.stats.gold)
  const lastUpdateFmt = prettyMs(lastUpdate * 1000, {compact: true});

  return <>
    <GlobalStyle font={settings.font} />
    <ThemeProvider theme={createTheme({palette: { mode: 'dark' }})}>
      <div id="stream">
        <div id="stats" style={{ width: `${containerWidth}%` }}>
          <Grid container spacing={0}> {/* Set spacing to 0 */}
            <Grid item xs={4}>
              <StatLine>
                <StatLabel style={{  color: '#ffbd6a' }}>
                  Gold:
                </StatLabel>
                <StatValue style={{ color: '#ffbd6a' }}>
                  {gold}
                </StatValue>
              </StatLine>
              <StatLine>
                <StatLabel style={{ color: '#ff8888' }}>
                  Fire:
                </StatLabel>
                <StatValue style={{ color: '#ff8888' }}>
                  {data.stats.fire}
                </StatValue>
              </StatLine>
              <StatLine>
                <StatLabel style={{ color: '#8888ff' }}>
                  Cold:
                </StatLabel>
                <StatValue style={{ color: '#8888ff' }}>
                  {data.stats.cold}
                </StatValue>
              </StatLine>
              <StatLine>
                <StatLabel style={{ color: '#ffff88' }}>
                  Ligh:
                </StatLabel>
                <StatValue style={{ color: '#ffff88' }}>
                  {data.stats.lightning}
                </StatValue>
              </StatLine>
              <StatLine>
                <StatLabel style={{ color: '#88ff88' }}>
                  Pois:
                </StatLabel>
                <StatValue style={{ color: '#88ff88' }}>
                  {data.stats.poison}
                </StatValue>
              </StatLine>
            </Grid>
            <Grid item xs={4}>
              <StatLine>
                <StatLabel>
                  Lvl:
                </StatLabel>
                <StatValue>
                  {data.stats.level}
                </StatValue>
              </StatLine>
              <StatLine>
                <StatLabel>
                  Str:
                </StatLabel>
                <StatValue>
                  {data.stats.strength}
                </StatValue>
              </StatLine>
              <StatLine>
                <StatLabel>
                  Dex:
                </StatLabel>
                <StatValue>
                  {data.stats.dexterity}
                </StatValue>
              </StatLine>
              <StatLine>
                <StatLabel>
                  Vit:
                </StatLabel>
                <StatValue>
                  {data.stats.vitality}
                </StatValue>
              </StatLine>
              <StatLine>
                <StatLabel>
                  Ene:
                </StatLabel>
                <StatValue>
                  {data.stats.energy}
                </StatValue>
              </StatLine>
            </Grid>
            <Grid item xs={4} alignItems={'end'} >
              <StatLine>
                <StatLabel>
                  FHR:
                </StatLabel>
                <StatValue>
                  {data.stats.fasterHitRate}
                </StatValue>
              </StatLine>
              <StatLine>
                <StatLabel>
                  FCR:
                </StatLabel>
                <StatValue>
                  {data.stats.fasterCastRate}
                </StatValue>
              </StatLine>
              <StatLine>
                <StatLabel>
                  FRW:
                </StatLabel>
                <StatValue>
                  {data.stats.fasterRunWalk}
                </StatValue>
              </StatLine>
            </Grid>
          </Grid>
          <div style={{ paddingLeft: 5, paddingTop: 3, textShadow: '0 0 2px black' }}>
            {itemsArr}
          </div>
          <div style={{ paddingLeft: 5, paddingTop: 5, color: '#777', fontSize: 14, textShadow: '0 0 2px black' }}>
            {lastUpdate > 5 && <>{t('Odczytane ')}{lastUpdateFmt} {t('temu')}</>}
          </div>
        </div>
      </div>
    </ThemeProvider>
  </>;
}

================
File: src/stream/styles.ts
================
import styled from 'styled-components'

export const Header = styled.div`
  padding-top: 10px;
  text-align: center;
  padding-bottom: 15px;
  font-size: 20vw;
  white-space: nowrap;
`;

export const StatLine = styled.div`
  white-space: nowrap;
  font-variant: small-caps;
  text-shadow: 0 0 2px black;
  padding-bottom: 1px;
`;

export const StatLabel = styled.div`
  width: 45px;
  display: inline-block;
`;

export const StatValue = styled.div`
  display: inline-block; 
`;

================
File: src/styles/GlobalStyle.ts
================
import { createGlobalStyle } from 'styled-components'

interface GlobalStyleProps {
  font: string;
}

export const GlobalStyle = createGlobalStyle<GlobalStyleProps>`
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html, body, #root {
    height: 100vh;
  }

  body {
    font-family: ${props => props.font}, monospace !important;
    font-size: 16px !important;
    color: #E1E1E6;
  }

  a {
    color: #6E55AE;
    text-decoration: none;
  }

  span, p, a {
    font-family: monospace !important;
  }

  body#streamRoot {
      margin: 0;
      padding: 0;
  }

  div#stream {
      display: flex;
      flex-direction: row;
      box-sizing: border-box;
      margin: 0;
      border: 0;
      justify-content: space-between;
  }
`

================
File: src/utils/defaultSettings.ts
================
import { Settings } from "../@types/main.d";

const defaultSettings: Settings = {
  saveDir: '',
  lang: '',
  font: 'Roboto',
  columnGap: 10,
  selectedGemFilters: ['topaz', 'amethyst', 'sapphire', 'ruby', 'emerald', 'diamond', 'skull'],
}

export default defaultSettings;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "lib": [
      "es2015",
      "es2016",
      "es2017",
      "dom"
    ],
    "allowJs": true,
    "jsx": "react-jsx",
    "sourceMap": true,
    "outDir": "./dist",
    "strict": true ,
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "typeRoots": [
      "types",
      "node_modules/@types"
    ]
  }
}

================
File: webpack/main.webpack.js
================
module.exports = {
  resolve: {
    extensions: ['.ts', '.js', '.d.ts']
  },
  entry: [
    "./electron/main.ts",
  ],
  module: {
    rules: require('./rules.webpack'),
  }
}

================
File: webpack/renderer.webpack.js
================
const CopyPlugin = require("copy-webpack-plugin");

module.exports = {
  resolve: {
    extensions: ['.ts', '.tsx', '.js']
  },
  module: {
    rules: require('./rules.webpack'),
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        // the "./stream" is a hack, for some reason for the "stream" webpack config if outputs files
        // one directory up in the filesystem and I don't know how to fix this
        // By outputing it to ""./stream" it outputs to root of "stream" public files and to "/stream" in "main_window"
        // public files
        { context: "./public/fonts", from: "*.woff2", to: "./stream" },
      ],
    }),
  ],
}

================
File: webpack/rules.webpack.js
================
module.exports = [
  {
    test: /\.node$/,
    use: 'node-loader',
  },
  {
    test: /\.(js|ts|tsx)$/,
    exclude: /node_modules\/(?!(d2-holy-grail)\/).*/,
    use: {
      loader: 'babel-loader'
    }
  },
  {
    test: /\.(png|jpe?g|gif)$/i,
    loader: 'file-loader',
    options: {
      name: '[path][name].[ext]',
    },
  },
  {
    test: /\.svg$/,
    use: [
      {
        loader: 'svg-url-loader',
      },
    ],
  },
  {
    test: /\.css$/i,
    use: ["style-loader", "css-loader"],
  },
]
